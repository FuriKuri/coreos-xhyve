#!/bin/bash

set -e -o pipefail

getVersionID () {
    declare channel="$1"
    v_url="http://${channel}.release.core-os.net/amd64-usr/current/version.txt"
    curl -Lsk "${v_url}" | grep COREOS_VERSION_ID= | sed -e 's,.*=,,'
}

CHANNEL=${CHANNEL:-alpha}
VERSION=${VERSION:-$(getVersionID ${CHANNEL})}
IMGSDIR=${IMGSDIR:-imgs}

# Ensure that required executables exist before proceeding
which curl >/dev/null || (echo "CURL is required." && exit 1)

type gpg 2>&1 > /dev/null || echo "GPG was not found. Downloaded images integrity won't be verified."

# Everything we do should be user-access only!
umask 077

# Pre-flight checks pass, lets get this party started!
WORKDIR=$(mktemp -d coreos-install.XXXXXXXXXX)
trap "rm -rf '${WORKDIR}'" EXIT
chmod 700 ${WORKDIR}

# Image signing key: buildbot@coreos.com
GPG_LONG_ID="48F9B96A2E16137F"
GPG_KEY_FILENAME=CoreOS_Image_Signing_Key.asc
GPG_KEY_URL=https://coreos.com/security/image-signing-key/$GPG_KEY_FILENAME
curl $GPG_KEY_URL > $WORKDIR/$GPG_KEY_FILENAME

# Setup GnuPG for verifying the image signature
export GNUPGHOME="${WORKDIR}/gnupg"
mkdir "${GNUPGHOME}"

type gpg 2>&1 > /dev/null && gpg --batch --quiet --import < $WORKDIR/$GPG_KEY_FILENAME

function get {
	FILE=$1
	if [ -f ${IMGSDIR}/${CHANNEL}.${VERSION}.${FILE} ]; then
		echo "found cached $FILE (${CHANNEL}/${VERSION})"
		return
	fi

	cd ${WORKDIR}
	curl "${ROOT}${FILE}" > ${FILE}
	curl "${ROOT}${FILE}.sig" > ${FILE}.sig
	cd -

	type gpg 2>&1 > /dev/null && gpg --batch --trusted-key "${GPG_LONG_ID}" \
		--verify "${WORKDIR}/${FILE}.sig" "${WORKDIR}/${FILE}"
	mv ${WORKDIR}/${FILE} ${IMGSDIR}/${CHANNEL}.${VERSION}.${FILE}
	mv ${WORKDIR}/${FILE}.sig ${IMGSDIR}/${CHANNEL}.${VERSION}.${FILE}.sig
}

mkdir -p ${IMGSDIR}
ROOT=http://${CHANNEL}.release.core-os.net/amd64-usr/${VERSION}/
VMLINUZ=coreos_production_pxe.vmlinuz
INITRD=coreos_production_pxe_image.cpio.gz
get $VMLINUZ
get $INITRD


